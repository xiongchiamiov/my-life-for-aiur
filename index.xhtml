<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>My Life for Aiur!</title>
	<link rel="stylesheet" type="text/css" href="jasmine-1.0.1/jasmine.css" />
	<script type="text/javascript" src="jasmine-1.0.1/jasmine.js" />
	<script type="text/javascript" src="jasmine-1.0.1/jasmine-html.js" />
	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/mootools/1.3.0/mootools-yui-compressed.js" />
	<style type="text/css">
		body {
			background-color: ##D6DEFF;
			min-height: 100%;
		}
		#game div {
			border: 2px dotted #222;
			height: 200px;
			display: inline-block;
		}
		#player-left,
		#player-right {
			width: 100px;
		}
		#player-left,
		#playing-field {
			float: left;
			margin-right: 2em;
		}
		#playing-field {
			width: 200px;
		}
	</style>
	<script type="text/javascript">
		/* <![CDATA[ */
		var Card = new Class({
			initialize: function(value, image) {
				this.value = value;
				this.image = image;
			},
		});
		var Player = new Class({
			initialize: function(name, cards) {
				this.name = name;
				this.cards = cards;
				this.cardsInPlay = [];
				this.hasPlayed = 0;
			},
			
			play_card: function() {
				this.cardsInPlay.push(this.cards.shift());
				this.hasPlayed += 1;
			},
		});
		var Game = new Class({
			initialize: function(players) {
				this.players = players;
				this.war = false;
			},
			
			take_turn: function(playerID) {
				if ((this.war && this.players[playerID].hasPlayed > 3)
				|| (!this.war && this.players[playerID].hasPlayed)) {
					return false;
				}
				
				this.players[playerID].play_card();
				
				if (this.everyone_is_ready()) {
					var result = this.calculate_result();
					assert(result.length > 0);
					
					if (result.length > 1) {
						this.war = result;
					} else { // somebody won this round
						this.players[result[0]].cards.append(this.cards_in_play());
						this.clean_up_cards();
						
						this.prune_losers();
						if (this.players.length == 1) {
							winner = this.end_game();
							console.log(winner.name + " won the game!");
							return winner;
						}
					}
					
					this.reset_played_status();
					
					return result;
				}
			},
			
			calculate_result: function() {
				var max = -1;
				var best = [];
				
				this.cards_in_active_play().each(function(card, index) {
					if (card.value > max) {
						max = card.value;
						best = [index];
					} else if (card.value == max) {
						best.push(index);
					}
				});
				
				return best;
			},
			
			everyone_is_ready: function() {
				var game = this;
				return (this.war)
				       ? this.war.every(function(playerID) {
				         	return game.players[playerID].hasPlayed > 3;
				         })
				       : this.players.every(function(player) {
				         	return player.hasPlayed;
				         });
			},
			
			cards_in_play: function() {
				return this.players.map(function(player) {
					return player.cardsInPlay;
				}).flatten();
			},
			
			cards_in_active_play: function() {
				return this.players.map(function(player) {
					return player.cardsInPlay.getLast();
				});
			},
			
			clean_up_cards: function() {
				this.players.each(function(player){
					player.cardsInPlay = [];
				});
			},
			
			prune_losers: function() {
				this.players = this.players.filter(function(player) {
					return player.cards.length > 0;
				});
			},
			
			end_game: function() {
				assert(this.players.length == 1);
				
				this.completed = true;
				return this.players[0];
			},
			
			reset_played_status: function() {
				this.players.each(function(player){
					player.hasPlayed = 0;
				});
			},
		});
		
		// Thanks to David Walsh
		// http://davidwalsh.name/array-shuffling-mootools
		Array.implement({
			shuffle: function() {
				//destination array
				for(var j, x, i = this.length; i; j = parseInt(Math.random() * i), x = this[--i], this[i] = this[j], this[j] = x);
				return this;
			}
		});
		
		// Thanks to Ayman Hourieh
		// http://aymanh.com/9-javascript-tips-you-may-not-know#assertion
		// Licensed under http://creativecommons.org/licenses/by-nc-sa/3.0/
		function AssertException(message) { this.message = message; }
		AssertException.prototype.toString = function () {
			return 'AssertException: ' + this.message;
		}
		
		function assert(exp, message) {
			if (!exp) {
				throw new AssertException(message);
			}
		}
		
		window.addEvent('domready', function() {
			jasmine.getEnv().addReporter(new jasmine.TrivialReporter());
			jasmine.getEnv().execute();
			
			cards = [
				new Card(1),
				new Card(2),
				new Card(3),
				new Card(4),
			].shuffle();
			
			// War-generating
			//cards = [
			//	new Card(1),
			//	new Card(2),
			//	new Card(3),
			//	new Card(4),
			//	new Card(4),
			//	
			//	new Card(1),
			//	new Card(2),
			//	new Card(3),
			//	new Card(4),
			//	new Card(5),
			//];
			
			
			player1 = new Player('Player 1', cards.slice(0, cards.length/2));
			player2 = new Player('Player 2', cards.slice(cards.length/2));
			
			game = new Game([player1, player2]);
		});
		/* ]]> */
	</script>
	<script type="text/javascript">
		describe('Player', function() {
			var player;
			
			it('should have on less card after playing a card', function() {
				var player = new Player('player', [new Card(0), new Card(1), new Card(2)]);
				var length = player.cards.length;
				player.play_card();
				
				expect(player.cards.length).toEqual(length-1);
			});
		});
		
		describe('Game', function() {
			describe('When two players tie', function() {
				var game;
				var player1;
				var player2;
				
				beforeEach(function() {
					player1 = new Player('Player 1', [new Card(1)]);
					player2 = new Player('Player 2', [new Card(1)]);
					
					game = new Game([player1, player2]);
					game.take_turn(0);
					game.take_turn(1);
				});
				
				it('should have a war', function() {
					expect(game.war).toBeTruthy();
				});
				
				it('should list all tied players in the war list', function() {
					expect(game.war).toContain(0);
					expect(game.war).toContain(1);
				});
				
				describe('and place three cards', function() {
					beforeEach(function() {
						player1.cards.append([new Card(2), new Card(3), new Card(4)]);
						player2.cards.append([new Card(5), new Card(6), new Card(7)]);
						
						game.take_turn(0);
						game.take_turn(0);
						game.take_turn(0);
						game.take_turn(1);
						game.take_turn(1);
						game.take_turn(1);
					});
					
					describe('with the fourth pair of cards resulting being unequal', function() {
						var result;
						
						beforeEach(function() {
							player1.cards.push(new Card(8));
							player2.cards.push(new Card(9));
							
							game.take_turn(0);
							result = game.take_turn(1);
						});
						
						it('should declare as winner the player with the highest fourth card', function() {
							expect(result).toEqual(player2);
						});
						
						it('should give all played cards to the winner', function() {
							expect(player2.cards).toContain(new Card(1));
							expect(player2.cards).toContain(new Card(2));
							expect(player2.cards).toContain(new Card(3));
							expect(player2.cards).toContain(new Card(4));
							expect(player2.cards).toContain(new Card(5));
							expect(player2.cards).toContain(new Card(6));
							expect(player2.cards).toContain(new Card(7));
							expect(player2.cards).toContain(new Card(8));
							expect(player2.cards).toContain(new Card(9));
						});
					});
				});
			});
		});
	</script>
</head>
<body>
	<div id="game">
		<div id="player-left">
			left
		</div>
		<div id="playing-field">
		</div>
		<div id="player-right">
			right
		</div>
	</div>
</body>
</html>
